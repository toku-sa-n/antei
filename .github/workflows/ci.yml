name: CI

on: [pull_request]

jobs:
  fmt:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v2

      - name: Run rustfmt
        run: cargo fmt -- --check

  clippy:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    env:
      RUSTFLAGS: -D warnings -D absolute_paths_not_starting_with_crate -D elided_lifetimes_in_paths -D explicit_outlives_requirements -D macro_use_extern_crate -D meta_variable_misuse -D missing_abi -D missing_copy_implementations -D missing_debug_implementations -D non_ascii_idents -D pointer_structural_match -D semicolon_in_expressions_from_macros -D single_use_lifetimes -D trivial_casts -D trivial_numeric_casts -D unaligned_references -D unreachable_pub -D unused_extern_crates -D unused_import_braces -D unused_lifetimes -D unused_qualifications

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -- -D clippy::pedantic -D clippy::all

      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --features test_on_qemu -- -D clippy::pedantic -D clippy::all

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    strategy:
      matrix:
        release: [0, 1]

    steps:
      - uses: actions/checkout@v2

      - name: Install the Rust toolchain for Windows to build an UEFI binary
        run: rustup target add x86_64-pc-windows-gnu

      - name: Install the other dependencies
        run: |
          sudo apt-get update
          sudo apt-get install gcc-mingw-w64 mtools lld qemu-system ovmf
          sudo ln -s /usr/bin/lld /usr/bin/lld-link --verbose

      - name: Copy OVMF_*
        run: cp /usr/share/OVMF/OVMF_* .

      # Don't remove this step as the normal and test builds use different codes. Succeeding in building the test code does not mean the success of building the normal code.
      - name: Build the OS
        run: make -j$(nproc) RELEASE=${{ matrix.release }}

      - name: Test the OS
        run: make -j$(nproc) RELEASE=${{ matrix.release }} test
