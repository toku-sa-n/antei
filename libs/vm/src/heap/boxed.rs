use {
    core::{
        alloc::Layout,
        fmt,
        marker::PhantomData,
        mem::{align_of, size_of},
        ops::{Deref, DerefMut},
        ptr::NonNull,
    },
    os_units::Bytes,
};

pub struct Kbox<T: ?Sized> {
    ptr: NonNull<T>,
    bytes: Bytes,
    alignment: Bytes,
    _marker: PhantomData<T>,
}
impl<T: ?Sized> Kbox<T> {
    fn layout(&self) -> Layout {
        Layout::from_size_align(self.bytes.as_usize(), self.alignment.as_usize()).unwrap()
    }
}
impl<T> Kbox<T> {
    pub fn new(x: T) -> Self {
        let p: *mut T = super::alloc(Layout::new::<T>()).cast();
        let ptr = NonNull::new(p).expect("Failed to allocate memory.");

        // SAFETY: The pointer points to the allocated memory.
        unsafe {
            ptr.as_ptr().write(x);
        }

        Self {
            ptr,
            bytes: size_of::<T>().into(),
            alignment: align_of::<T>().into(),
            _marker: PhantomData,
        }
    }
}
impl<T: ?Sized> Clone for Kbox<T>
where
    T: Clone,
{
    fn clone(&self) -> Self {
        Self::new(self.deref().clone())
    }
}
impl<T: ?Sized> Deref for Kbox<T> {
    type Target = T;

    fn deref(&self) -> &Self::Target {
        // SAFETY: The pointer points to the allocated, and initialized value.
        unsafe { self.ptr.as_ref() }
    }
}
impl<T: ?Sized> DerefMut for Kbox<T> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        // SAFETY: The pointer points to the allocated, and initialized value.
        unsafe { self.ptr.as_mut() }
    }
}
impl<T: fmt::Debug + ?Sized> fmt::Debug for Kbox<T> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        fmt::Debug::fmt(&**self, f)
    }
}
impl<T: ?Sized> Drop for Kbox<T> {
    fn drop(&mut self) {
        // SAFETY: The pointer is generated by `alloc`, and the layout is the same as the one used
        // to allocate the memory.
        unsafe {
            super::dealloc(self.ptr.as_ptr().cast(), self.layout());
        }
    }
}
unsafe impl<T: Send> Send for Kbox<T> {}
unsafe impl<T: Sync> Sync for Kbox<T> {}
